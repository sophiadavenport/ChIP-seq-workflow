import pandas

sample_csv = pandas.read_csv('sample_sheet.csv', index_col='name')
condition = set(sample_csv['condition'].tolist())
rep = set(sample_csv['replicate'].tolist())

index = ['.1', '.2', '.3', '.4', '.rev.1', '.rev.2']

rule all:
	input: expand('results/GRCh38.primary_assembly.genome{index}.bt2', index = index), expand('results/{condition}_{rep}_fastqc.html', condition=condition, rep=rep), expand('results/{condition}_{rep}.flagstats.txt', condition=condition, rep=rep), 'results/multiqc_report.html', 'results/plot.png', directory('results/motifs/'), expand("results/RUNX1_{rep}_plotprofile.png", rep=rep)

rule wget_files:
	output:
		'samples/{condition}_{rep}.fastq.gz'
	params:
		link = lambda wildcards: sample_csv.loc['{}_{}'.format(wildcards.condition, wildcards.rep), 'ftp_link'],
		renamed = lambda wildcards: 'samples/{}_{}.fastq.gz'.format(wildcards.condition, wildcards.rep)
	shell:
		'''
		wget -O {params.renamed} {params.link} 
		'''

#the following rule will use a lot of memory 
rule bowtie2_build_gencode:
	input:
		fasta = 'results/GRCh38.primary_assembly.genome.fa.gz'
	output:
		expand('results/GRCh38.primary_assembly.genome{index}.bt2', index=index)
	params:
		index_name = 'results/GRCh38.primary_assembly.genome'
	threads: 16
	conda:
		'envs/bowtie2_env.yml'
	shell:
		'''
		bowtie2-build {input.fasta} {params.index_name}
		'''

rule fastqc:
	input:
		fastq = 'samples/{condition}_{rep}.fastq.gz'
	output:
		fastqc = 'results/{condition}_{rep}_fastqc.html'
	params:
		outdir = 'results/'
	threads: 4
	conda:
		'envs/fastqc_env.yml'
	shell:
		'''
		fastqc {input.fastq} -o {params.outdir}
		'''

rule trimomatic:
	input:
		adapter = 'samples/TruSeq3-SE.fa',
		fastq = 'results/{condition}_{rep}_fastq.gz'
	output:
		trim = 'results/{condition}_{rep}_fastq.gz'
	threads: 8
	conda:
		'envs/trimmomatic_env.yml'
	shell:
		'''
	trimmomatic SE {input.fastq} {output.trim} ILLUMINACLIP:{adapter}:2:30:10 LEADING:3 TRAILING:3 SLIDINGWINDOW:4:15
		'''

rule bowtie2_align:
	input:
		samples = 'samples/{condition}_{rep}.fastq.gz'
	output:
		bam = 'results/{condition}_{rep}_aligned.bam'
	threads: 16
	params:
		i = 'results/GRCh38.primary_assembly.genome'
	conda:
		'envs/bowtie2_env.yml'
	shell:
		'''
		bowtie2 -p {threads} -x {params.i} -U {input.samples} | samtools view  -Sb -o {output.bam}
		'''

rule samtools_sort:
	input:
		bam = 'results/{condition}_{rep}_aligned.bam'
	output:
		sorted = 'results/{condition}_{rep}_sorted.bam'
	conda:
		'envs/samtools_env.yml'
	shell:
		'''
		samtools sort {input.bam} -o {output.sorted}
		'''

rule samtools_idx:
	input:
		sorted = 'results/{condition}_{rep}_sorted.bam'
	output:
		bam_index = touch('results/{condition}_{rep}_index.bam')
	conda:
		'envs/samtools_env.yml'
	shell:
		'''
		samtools index {input.sorted}
		'''

rule samtools_flagstats:
    input:
        bam = 'results/{condition}_{rep}_sorted.bam'
    output:
        flags = 'results/{condition}_{rep}.flagstats.txt'
    conda:
        'envs/samtools_env.yml'
    shell:
        '''
        samtools flagstat {input.bam} > {output.flags}
        '''

#use expand because creating one from many (add to rule all later: 'results/multiqc_report.html', )
rule multiqc:
	input:
		fq = expand('results/{condition}_{rep}_fastqc.html', condition=condition , rep=rep)
	output:
		results = 'results/multiqc_report.html'
	params:
		results = 'results/'
	conda:
		'envs/multiqc_env.yml'
	shell:
		'''
		multiqc {params.results} -o {params.results}
		'''

rule bamCoverage:
	input: touched = 'results/{condition}_{rep}_index.bam', bam = 'results/{condition}_{rep}_sorted.bam'
	output:
		bamcov = 'results/{condition}_{rep}_coverage.bw'
	threads: 4
	conda:
		'envs/deeptools_env.yml'
	shell:
		'''
		bamCoverage -p {threads} -b {input.bam} -o {output.bamcov}
		'''

rule multiBwSummary:
	input:
		bigwigs = expand('results/{condition}_{rep}_coverage.bw', condition=condition, rep=rep)
	output:
		compressed_matrix = 'results/bwsummary.npz'
	conda:
		'envs/deeptools_env.yml'
	shell:
		'''
		multiBigwigSummary bins -b {input.bigwigs} -o {output.compressed_matrix}
		'''

rule plotCorrelation:
	input:
		compressed_matrix = 'results/bwsummary.npz'
	output:
		heatmap = 'results/plot.png'
	params:
	conda:
		'envs/deeptools_env.yml'
	shell:
		'''
		plotCorrelation -in {input.compressed_matrix} -c pearson -p heatmap -o {output.heatmap}
		'''

rule make_tag_dir:
	input: 
		bam = 'results/{condition}_{rep}_sorted.bam'
	output:
		out = directory('results/{condition, RUNX1|INP}_{rep}/')
	params:
		dirs = 'results/{condition}_{rep}/'
	conda:
		'envs/homer_env.yml'
	shell:
		'''
		makeTagDirectory {params.dirs} {input.bam}
		'''

#takes text file and homer peak files to the bed file format
#INP is the control samples
rule findPeaks:
	input:
		RUNX1 = 'results/RUNX1_{rep}/', INP = 'results/INP_{rep}/'
	output:
		out = 'results/RUNX1_{rep}_peaks.txt'
	conda:
		'envs/homer_env.yml'
	shell:
		'''
		findPeaks {input.RUNX1} -style factor -o {output.out} -i {input.INP}
		'''

rule convertPeakFiles:
	input:
		peak_txt = 'results/RUNX1_{rep}_peaks.txt'
	output:
		bed = 'results/RUNX1_{rep}_peaks.bed'
	conda:
		'envs/homer_env.yml'
	shell:
		'''
		pos2bed.pl {input.peak_txt} > {output.bed}
		'''

rule intersect_peaks:
	input:
		rep1 = 'results/RUNX1_rep1_peaks.bed', rep2 = 'results/RUNX1_rep2_peaks.bed'
	output:
		bed = 'results/intersection.bed'
	conda:
		'envs/bedtools_env.yml'
	shell:
		'''
		bedtools intersect -a {input.rep1} -b {input.rep2} -bed > {output.bed}
		'''

# -v will subtract everything in -b file from -a file
rule filter_blacklist:
	input:
		bed = 'results/intersection.bed', blacklist = 'results/hg38-blacklist.v2.bed'
	output:
		filtered_bed = 'results/filtered_intersection.bed'
	conda:
		'envs/bedtools_env.yml'
	shell:
		'''
		bedtools intersect -a {input.bed} -b {input.blacklist} -v -bed > {output.filtered_bed}
		'''

rule unzip_gtf:
	input:
		annotation_zipped = 'results/gencode.v45.primary_assembly.annotation.gtf.gz'
	output:
		annotation = 'results/gencode.v45.primary_assembly.annotation.gtf'
	shell:
		'''
		gunzip -c {input.annotation_zipped} > {output.annotation}
		'''

rule annotate_peaks:
	input:
		bed = 'results/filtered_intersection.bed', annotation = 'results/gencode.v45.primary_assembly.annotation.gtf'
	output:
		annotated_peaks = 'results/annotated_peaks.txt'
	conda:
		'envs/homer_env.yml'
	shell:
		'''
		annotatePeaks.pl {input.bed} hg38 -gtf {input.annotation} > {output.annotated_peaks}
		'''

rule unzip_genome:
	input:
		zipped_genome = 'results/GRCh38.primary_assembly.genome.fa.gz'
	output:
		genome = 'results/GRCh38.primary_assembly.genome.fa'
	shell:
		'''
		gunzip -c {input.zipped_genome} > {output.genome}
		'''

rule motifs:
	input:
		genome = 'results/GRCh38.primary_assembly.genome.fa', annotated_peaks = 'results/annotated_peaks.txt'
	output:
		motifs = directory('results/motifs/')
	conda:
		'envs/homer_env.yml'
	shell:
		'''
		findMotifsGenome.pl {input.annotated_peaks} {input.genome} {output.motifs} -size 200
		'''

rule computeMatrix:
	input:
		bed = "results/hg38_genes.bed", bigwigs = "results/RUNX1_{rep}_coverage.bw"
	output:
		"results/RUNX1_{rep}_computematrix.gz"
	params:
	conda:
		'envs/deeptools_env.yml'
	threads: 4
	shell:
		'''
		computeMatrix scale-regions -S {input.bigwigs} -R {input.bed} -b 2000 --outFileName {output}
		'''

rule plotMatrix:
	input:
		matrixes = "results/RUNX1_{rep}_computematrix.gz"
	output:
		plot = "results/RUNX1_{rep}_plotprofile.png"
	conda:
		'envs/deeptools_env.yml'
	shell:
		'''
		plotProfile -m {input.matrixes} -o {output.plot}
		'''